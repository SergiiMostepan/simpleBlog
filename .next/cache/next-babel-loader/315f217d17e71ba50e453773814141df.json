{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { combineReducer } from \"./reducers\";\nlet store;\n\nfunction initStore(initialState) {\n  return createStore(combineReducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n}\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState);\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState));\n    store = undefined;\n  }\n\n  if (true) return _store;\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["/Users/applestock/Desktop/IT/Собесы/Blog/newRepo/simpleBlog/store.tsx"],"names":["useMemo","createStore","applyMiddleware","composeWithDevTools","thunkMiddleware","combineReducer","store","initStore","initialState","initializeStore","preloadedState","_store","getState","undefined","useStore"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,YAA/B;AAEA,IAAIC,KAAJ;;AAEA,SAASC,SAAT,CAAmBC,YAAnB,EAAsC;AACpC,SAAOP,WAAW,CAChBI,cADgB,EAEhBG,YAFgB,EAGhBL,mBAAmB,CAACD,eAAe,CAACE,eAAD,CAAhB,CAHH,CAAlB;AAKD;;AAED,OAAO,MAAMK,eAAe,GAAIC,cAAD,IAAyB;AAAA;;AACtD,MAAIC,MAAM,cAAGL,KAAH,6CAAYC,SAAS,CAACG,cAAD,CAA/B;;AAEA,MAAIA,cAAc,IAAIJ,KAAtB,EAA6B;AAC3BK,IAAAA,MAAM,GAAGJ,SAAS,iCACbD,KAAK,CAACM,QAAN,EADa,GAEbF,cAFa,EAAlB;AAKAJ,IAAAA,KAAK,GAAGO,SAAR;AACD;;AAED,YAAmC,OAAOF,MAAP;AAEnC,MAAI,CAACL,KAAL,EAAYA,KAAK,GAAGK,MAAR;AAEZ,SAAOA,MAAP;AACD,CAjBM;AAmBP,OAAO,SAASG,QAAT,CAAkBN,YAAlB,EAAqC;AAC1C,QAAMF,KAAK,GAAGN,OAAO,CAAC,MAAMS,eAAe,CAACD,YAAD,CAAtB,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOF,KAAP;AACD","sourcesContent":["import { useMemo } from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { combineReducer } from \"./reducers\";\n\nlet store: [] | undefined | {} | any;\n\nfunction initStore(initialState: any) {\n  return createStore(\n    combineReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(thunkMiddleware))\n  );\n}\n\nexport const initializeStore = (preloadedState: any) => {\n  let _store = store ?? initStore(preloadedState);\n\n  if (preloadedState && store) {\n    _store = initStore({\n      ...store.getState(),\n      ...preloadedState,\n    });\n\n    store = undefined;\n  }\n\n  if (typeof window === \"undefined\") return _store;\n\n  if (!store) store = _store;\n\n  return _store;\n};\n\nexport function useStore(initialState: any) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}